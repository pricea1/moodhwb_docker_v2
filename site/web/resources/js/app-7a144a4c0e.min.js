"use strict";
(function(window, document, $) {
  window.opad = window.opad || {};

  var initQ = [];
  var jsModules = [];

  opad.init = function() {
    // Initialise components
    for (var i = 0; i < initQ.length; i++) {
      if (typeof initQ[i] === "function") {
        initQ[i]();
      }
    }
    $("#hideThisLink").on("click", hideThis);

    $("#searchIcon").on("click", toggleSearch);
  };

  opad.addToInitQueue = function(callback) {
    initQ.push(callback);
  };

  opad.addToJsModules = function(module) {
    jsModules.push(module);
  };

  opad.initJsModule = function(modulesList) {
    var modulesToInitEl = $(".module-block[data-modules]");
    var modulesList = modulesList || ["module"];
    var localModules = "";

    for (var m = 0; m < modulesToInitEl.length; m++) {
      localModules = $(modulesToInitEl[m])
        .attr("data-modules")
        .split(",");

      for (var l = 0; l < localModules.length; l++) {
        if (modulesList.indexOf(localModules[l]) == -1) {
          modulesList.push(localModules[l]);
        }
      }
    }

    for (var j = 0; j < modulesList.length; j++) {
      for (var i = 0; i < jsModules.length; i++) {
        if (jsModules[i].name === modulesList[j]) {
          if (typeof jsModules[i].fn === "function") {
            jsModules[i].fn();
            break;
          }
        }
      }
    }

    opad.globalInit();
  };

  opad.globalInit = function() {
    $("a[data-js-url]").each(function() {
      var $this = $(this);
      $this.attr("href", $this.attr("data-js-url"));
    });
  };

  opad.postActionRequest = function(req, data, cbSuccess, cbError) {
    // Add csrf token
    data[craftSettings.csrfTokenName] = craftSettings.csrfTokenValue;

    var url =
      "/" +
      craftSettings.actionTrigger +
      "/" +
      req.plugin +
      "/" +
      req.controller +
      "/" +
      req.action;

    $.post(url, data)
      .done(function(res) {
        if (typeof cbSuccess === "function") {
          cbSuccess(res);
        }
      })
      .error(function(err) {
        if (typeof cbError === "function") {
          cbError(err);
        }
      });
  };

  opad.skipMoodSave = false;

  function hideThis() {
    $("body").html("");
    window.location = "http://www.google.com";
  }

  function toggleSearch() {
    $("#searchFormContainer").toggleClass("hide");
    if ($("#searchFormContainer").hasClass("hide")) {
      $(this).removeClass("show-search");
      $("#searchFormInput").blur();
    } else {
      $("#searchFormInput").focus();
      $(this).addClass("show-search");
    }
  }

  $(document).ready(function() {
    opad.init();
  });
})(window, document, jQuery);

'use strict';
(function(window, document, $){

	function init(){
	}

	opad.addToInitQueue(init);

})(window, document, jQuery);

"use strict";
(function(window, document, $) {
  var endScrollTimeout, scrollTimeout;
  var moduleViewTime = 1000; // Minimum time a module must be viewed before registering a view event

  function init() {
    var $firstSubmodule;

    //opad.getSubmoduleStatus();
    $(".module-nav__row--current").on("click", function(ev) {
      ev.preventDefault();
      $(this)
        .parents(".module-nav")
        .toggleClass("module-nav--closed");
    });

    $("#moduleNav a").on("click", function(ev) {
      // Stop event bubbling from click nav link so menu doesn't close
      ev.stopPropagation();
    });

    if (
      typeof opadVideoEl != "undefined" &&
      $("#" + opadVideoEl).length &&
      opadVideoUrl_hls
    ) {
      var playerInstance = jwplayer(opadVideoEl);
      playerInstance.setup({
        height: "100%",
        aspectratio: "16:9",

        playlist: [
          {
            image: opadVideoImage,
            sources: [
              {
                file: opadVideoUrl_hls
              },
              {
                file: opadVideoUrl_mp4
              }
            ]
          }
        ]
        //			    primary: "flash"
      });
    }

    doSaveModuleStatus(
      window.craftSettings.entry.id,
      "viewed",
      window.craftSettings.entry.uri
    );
    ga("send", "pageview", window.craftSettings.entry.uri);
    craftEventTracker.sendEvent({
      interactionId: "view",
      interactionCategory: "module",
      parameter1: window.craftSettings.entry.uri
    });

    picturefill();
    if (!Modernizr.csscolumns) {
      $(".two-columns").columnize({
        cssClassPrefix: "columnizer",
        columns: 2
      });

      $(".three-columns").columnize({
        cssClassPrefix: "columnizer",
        columns: 3
      });
    }

    // Scroll to reqeusted submodule if applicable
    /*
		if (window.location.hash){
			$('html, body').animate({
		        scrollTop: $("a[name='" + window.location.hash.replace('#','') + "']").offset().top
		    }, 1000);
		}
*/
    initModuleNav();

    initRecommendations();
  }

  function initModuleNav() {
    var isPrevious = true;
    $(".module-nav__list--level2 .module-nav__row").each(function() {
      var $navRow = $(this);

      if ($navRow.hasClass("module-nav__row--current")) {
        isPrevious = false;
        $navRow.attr("data-status", "current");
      }

      if (isPrevious) {
        $navRow.attr("data-status", "viewed");
      }
    });
  }

  function initRecommendations() {
    var request = {
      plugin: "moduleactions",
      controller: "default",
      action: "get-recommended-modules"
    };

    function success(res) {
      console.log(res);
      var highlightList =
        window.craftSettings.user.hereFor == "self"
          ? res.hereForSelf
          : res.hereForOther;

      for (var i = 0; i < highlightList.length; i++) {
        $(
          '.module-nav__list--level2 .module-nav__row[data-page-id="' +
            highlightList[i] +
            '"]'
        ).addClass("module-nav__row--highlight");
      }
    }

    function error(err) {}

    opad.postActionRequest(request, {}, success, error);
  }

  function doSaveModuleStatus(submoduleId, status, uri) {
    var request = {
      plugin: "moduleactions",
      controller: "default",
      action: "save-module-view"
    };

    var data = {
      submoduleId: submoduleId,
      status: status
    };

    opad.postActionRequest(request, data);

    // Register event on bespoke analytics
    craftEventTracker.sendEvent({
      interactionId: "sub-module-view",
      interactionCategory: "module",
      parameter1: uri
    });
  }

  opad.addToJsModules({
    name: "module",
    fn: init
  });

  //	opad.addToInitQueue(init);
})(window, document, jQuery);

"use strict";
(function(window, document, $) {
  function init() {
    var sliderViewed = window.localStorage.getItem("sliderViewed");
    if (!sliderViewed) {
      $(".range-slider-handle--hint-container.hide").removeClass("hide");
    }

    setTimeout(function() {
      $("[data-slider]")
        .on("change.fndtn.slider", function(ev) {
          // Update slider handle content with value
          var $this = $(this);
          var value = Math.floor($this.attr("data-slider") / 100);
          var $questionContainer = $this.parents(".slick-active");
          
          $questionContainer.find('#rangeSliderValue').text(value);
          $this.find(".range-slider-handle").attr("data-value", value);

          // Change icon
          $questionContainer.find(".show-icon").removeClass("show-icon");
          $questionContainer.find(".svg-face-" + value).addClass("show-icon");
          $questionContainer
            .find(".svg-container")
            .attr("data-mood-value", value);

          if (
            $this.attr("data-slider") != $this.attr("data-initial") &&
            $(".range-slider-handle--hint-container.hide").length == 0
          ) {
            window.localStorage.setItem("sliderViewed", "true");
            $(".range-slider-handle--hint-container").addClass("hide");
          }
        })
        .on("click", function(ev) {
          /* Set range value to closes step value */
          if (ev.target != this) {
            return;
          }

          ev.stopImmediatePropagation();
          /* Find number of steps in range */
          // data-options attribute will be in the form of start: 1; end: 7;
          var $this = $(this);
          var dataOptionsStr = $this.attr("data-options");
          var dataOptionsArr = dataOptionsStr.split(";");
          var dataOptionArr;
          var rangeStart, rangeEnd;
          var rangeWidth = $this.width();
          var i, scale, value;

          for (i = 0; i < dataOptionsArr.length; i++) {
            dataOptionArr = dataOptionsArr[i].split(":");

            switch (dataOptionArr[0].trim().toLowerCase()) {
              case "start":
                rangeStart = parseInt(dataOptionArr[1]);
                break;

              case "end":
                rangeEnd = parseInt(dataOptionArr[1]);
                break;
            }
          }

          scale = ev.offsetX / $this.width();

          value = (rangeEnd - rangeStart) * scale + rangeStart;

          $this.foundation("slider", "set_value", value);
        });
    }, 1000);

    $(".slick-carousel-container")
      .on("beforeChange", questionChange)
      .on("afterChange", checkQuestionEnd);
  }

  function questionChange(
    T,
    slick,
    currentSlide,
    overrideSuccessCB
  ) {
    var $slide = $(slick.$slides[currentSlide]);
    var questionId = $slide.find(".profile-question-questionid").val();
    var questionType = $slide.find(".profile-question-type").val();
    var questionValue = $slide.find(".profile-question-value").val();
    var rangeValue = Math.floor(
      $slide.find("[data-slider]").attr("data-slider") / 100
    );
    var $categoryInputs = $slide.find(".profile-user-options__input");
    var categoryList = Array();
    var request, data, period;
    var questionTimestamp = Math.floor(Date.now() / 1000);


    if (opad.skipMoodSave) {
      rangeValue = 0;
      /*
			if(typeof overrideSuccessCB == "function"){
				overrideSuccessCB();
				return;
			} else {
				return;
			}
*/
    }

    for (var i = 0; i < $categoryInputs.length; i++) {
      if ($categoryInputs[i].checked) {
        categoryList.push($categoryInputs[i].value);
      }
    }

    request = {
      plugin: "profiler",
      controller: "question",
      action: "save-question"
    };

    data = {
      profileQuestionType: questionType,
      profileQuestionId: questionId,
      profileQuestionAnswer: rangeValue ? rangeValue : 0,
      profileQuestionValue: questionValue,
      profileQuestionCategories: categoryList,
      profileQuestionIndex: currentSlide,
      profileQuestionTimestamp: questionTimestamp
    };

    function successCB(res) {}

    function errorCB(err) {}

    opad.postActionRequest(
      request,
      data,
      overrideSuccessCB || successCB,
      errorCB
    );

    craftEventTracker.sendEvent({
      interactionId: "mood-answer",
      interactionCategory: "mood",
      parameter1: data.profileQuestionId,
      parameter2: data.profileQuestionAnswer
    });
  }

  function checkQuestionEnd(event, slick, currentSlide, nextSlide) {
    var isEndOfQuestions = currentSlide == slick.$slides.length - 1;


    function endOfQuestions(ev) {
      // Use redirect callback on last question
      var redirectUri = $("#profileQuestionRedirect").attr("data-uri");

      craftEventTracker.sendEvent({
        interactionId: "mood-complete",
        interactionCategory: "mood"
      });
      questionChange(event, slick, currentSlide, nextSlide, function() {
        window.location.href = redirectUri;
      });
    }

    $(".profile-question-container").undelegate(".slick-next", "click");
    
    if (currentSlide > 0){
      $('#prevArrowButton').removeClass('hidden');
    } else {
      $('#prevArrowButton').addClass('hidden');
    }

    if (isEndOfQuestions) {
      // Last slide being viewed so get click event so we can redirect
      $("#nextArrowButton").html($("#nextArrowButton").attr("data-endtext"));
      $(".slick-next").on("click", endOfQuestions);
      $(".slick-skip").on("click", endOfQuestions);
    }
  }

  opad.addToJsModules({
    name: "profile",
    fn: init
  });

  //	opad.addToInitQueue(init);
})(window, document, jQuery);

'use strict';
(function(window, document, $){

	function init(){

		$('#profileGoalForm').submit( function(ev){

			// Override form submission with AJAX call
			ev.preventDefault();

			var $this = $(this);
			var action = $this.find('[name="action"]').attr('value').split('/');
			var inputs = $this.find('[name]');


			var request = {
				plugin: action[0],
				controller: action[1],
				action: action[2]
			}

			var data = {};

			var $input;

			// Create data object for AJAX from form inputs
			for (var i = 0; i < inputs.length; i++){
				$input = $(inputs[i]);

				if ($input.attr('name') !== "action"){
					data[$input.attr('name')] = $input.val();
				}
			}

			// Add default goal data
		//	data.id = "placeholder";
			data.isTodo = true;
			data.timesCompleted = 0;
			data.status = "todo";
			data.type = "weekly";

			data.timesLeft = data.timesPerWeek - data.timesCompleted;



			// Add item to goal lists quickly before repopulating after AJAX call
			var newToDoItem = opad.templates.profileGoalItemToDo({
				goal: data
			});
			$('.profile-goals__list--todo').prepend(newToDoItem);

			var newCompletedItem = opad.templates.profileGoalItemCompleted({
				goal: data
			});
			$('.profile-goals__list--completed').prepend(newCompletedItem);


			showWelcomeMsg(false);
			showAllTodoDoneMsg(false);

			opad.postActionRequest(request, data, successCB, errorCB);

		})

		function successCB(res){


			// Update placeholder details with returned data from server
			$('.profile-goals__list-item[data-goal-id="placeholder"]').attr('data-goal-id', res.id)
				.find('a')
				.each(function(){

					var $this = $(this);
					var href = $this.attr('href');
					href = href.replace('placeholder', res.id);
					$this.attr('href', href);
				})

			craftEventTracker.sendEvent({
				interactionId: 			'profile-goal-add',
				interactionCategory: 	'profile',
				parameter1: 			res.userId,
				parameter2: 			res.activity
			});

		}

		function errorCB(){

		}



		$('.profile-goals__list').delegate('.profile-goal__action-link', 'click', function(ev){

			var $this = $(this),
				hasCompleted,
				status,
				timesCompleted = 0,
				goalId;

			ev.preventDefault();

			goalId = $this.parents('[data-goal-id]').attr('data-goal-id');
			status = $this.parents('[data-goal-id]').attr('data-status')
			// Assume save is ok and change item on list immediately so user isn't waiting on JSON response.
			// If problem with API call then success/fail of API call will change item

			switch ($this.attr('data-goal-action')){

			case "delete":
				status = "deleted";

				// Check if last item and show welcome msg again if no items
				if ($('.profile-goals__list--todo .profile-goals__list-item').length == 1){
					showWelcomeMsg(true);
				}

				break;

			case "complete":
				$this.attr('data-times-completed', parseInt($this.attr('data-times-completed'))+1 );
				hasCompleted = (parseInt($this.attr('data-times-per-week')) == parseInt($this.attr('data-times-completed')) );
				timesCompleted = $this.attr('data-times-completed');
				status =  hasCompleted? 'completed' : status;
				break;

			case "undo":
				timesCompleted = 0;
				status = "todo";
				showAllTodoDoneMsg(false);
				break;

			}

			if (status){
				successGoalEdit(
					{	id: goalId,
						status: status,
						timesCompleted: timesCompleted,
						timesPerWeek: $this.attr('data-times-per-week')
					}
				)
			}


			$.get($this.attr('href'))
//				.done(successGoalEdit)  // No need for done event as optimistically changing completed. Only need to change on server fail
				.fail(failGoalEdit);

		})

	}


	function successGoalEdit(res){

		var $goalEl = $('.profile-goals__list-item[data-goal-id="' + res.id + '"]');

		$goalEl.attr('data-status', res.status)
			.find('.profile-goal__action-link').attr('data-times-completed', res.timesCompleted);

		var timesCompleted = ( res.timesPerWeek == res.timesCompleted)? res.timesPerWeek : res.timesPerWeek - res.timesCompleted;
		$goalEl.find('.profile-goals__times-completed').text(timesCompleted);

		// Check if all goals done
		if ($('.profile-goals__list--todo .profile-goals__list-item[data-status="todo"]').length == 0){
			showAllTodoDoneMsg(true);
		}

		craftEventTracker.sendEvent({
			interactionId: 			'profile-goal-' + res.status,
			interactionCategory: 	'profile',
			parameter1: 			res.userId,
			parameter2: 			res.activity
		});

	}

	function failGoalEdit(res){
		// Need to feedback to user somehow that there was an error saving
		successGoalEdit(res);
	}

	function showWelcomeMsg(show){
		if (show){
			$('.profile-goals__welcome-msg').removeClass('hide');
			$('.profile-goals__list-container').addClass('hide');
			$('.profile-goals-subheading-container').addClass('hide');

		} else {
			$('.profile-goals__welcome-msg').addClass('hide');
			$('.profile-goals__list-container').removeClass('hide');
			$('.profile-goals-subheading-container').removeClass('hide');

		}
	}

	function showAllTodoDoneMsg (show) {
		return;
		if (show){
			$('.profile-goals__todo-done').removeClass('hide');
			$('.profile-goals__todo-list').addClass('hide');
		} else {
			$('.profile-goals__todo-done').addClass('hide');
			$('.profile-goals__todo-list').removeClass('hide');

		}
	}

	opad.addToJsModules({
		name: "profile-goals",
		fn: init
	});

})(window, document, jQuery);

'use strict';
(function(window, document, $){

	function init(){

		// Initialise profile details dropdown menu
		$('#profileDashboardHeading').addClass('nav-arrow--closed')
			.on('click', function(){
				$('#profileDashboardContainer').toggleClass('profile-dashboard__details__show');
				$('#profileDashboardHeading').toggleClass('nav-arrow--closed');
		});


		$('#profileStuffILikeForm').submit( function(ev){

			// Override form submission with AJAX call
			ev.preventDefault();

			var $this = $(this);
			var action = $this.find('[name="action"]').attr('value').split('/');
			var inputs = $this.find('[name]');


			var request = {
				plugin: action[0],
				controller: action[1],
				action: action[2]
			}

			var data = {};

			var $input;

			// Create data object for AJAX from form inputs
			for (var i = 0; i < inputs.length; i++){
				$input = $(inputs[i]);

				if ($input.attr('name') !== "action"){
					data[$input.attr('name')] = $input.val();
				}
			}

			// Add default goal data
			data.id = "placeholder";

			// Add item to goal lists quickly before repopulating after AJAX call
			var newItem = opad.templates.profileStuffILikeItem({
				stuffILike: data
			});
			$('.profile-stuff-i-like__list').append(newItem);


			showWelcomeMsg(false);

			opad.postActionRequest(request, data, successCB, errorCB);


		})

		function successCB(res){
			// Update URL as server might have changed it to add http://
			if (res.url){
				$('.profile-stuff-i-like__list-item[data-stuff-i-like-id="placeholder"] .profile-stuff-i-like__user-link')
					.attr('href', res.url);
			}

			// Add Category CSS class icons
			if (res.categoryCssClass){
				$('.profile-stuff-i-like__list-item[data-stuff-i-like-id="placeholder"] .profile-stuff-i-like-icon')
					.addClass(res.categoryCssClass);
			}

			// Update placeholder details with returned data from server
			$('.profile-stuff-i-like__list-item[data-stuff-i-like-id="placeholder"]').attr('data-stuff-i-like-id', res.id)
				.find('.profile-stuff-i-like__action-link')
				.each(function(){

					var $this = $(this);
					var href = $this.attr('href');
					href = href.replace('placeholder', res.id);
					$this.attr('href', href);
				})

			craftEventTracker.sendEvent({
				interactionId: 			'profile-stuff-i-like-add' ,
				interactionCategory: 	'profile',
				parameter1: 			res.userId,
				parameter2: 			res.title
			});
		}

		function errorCB(){

		}



		$('.profile-stuff-i-like__list').delegate('.profile-stuff-i-like__action-link', 'click', function(ev){

			var $this = $(this),
				hasCompleted,
				status,
				timesCompleted = 0,
				stuffILikeId;

			ev.preventDefault();


			stuffILikeId = $this.parents('[data-stuff-i-like-id]').attr('data-stuff-i-like-id');

			// Assume save is ok and change item on list immediately so user isn't waiting on JSON response.
			// If problem with API call then success/fail of API call will change item

			switch ($this.attr('data-stuff-i-like-action')){

			case "delete":
				status = "deleted";

				// Check if last item and show welcome msg again if no items
				if ($('.profile-stuff-i-like__list .profile-stuff-i-like__list-item[data-status != "deleted"]').length == 1){
					showWelcomeMsg(true);
				}
				break;

			}

			if (status){
				successGoalEdit(
					{	id: stuffILikeId,
						status: status
					}
				)
			}


			$.get($this.attr('href'))
				.done(successGoalEdit)
				.fail(failGoalEdit);

		})

	}


	function successGoalEdit(res){

		var $stuffILikeId = $('.profile-stuff-i-like__list-item[data-stuff-i-like-id="' + res.id + '"]');

		if (res.status){
			$stuffILikeId.attr('data-status', res.status);


			craftEventTracker.sendEvent({
				interactionId: 			'profile-stuff-i-like-' + res.status,
				interactionCategory: 	'profile',
				parameter1: 			res.userId,
				parameter2: 			res.title
			});
		}
	}

	function failGoalEdit(res){
		// Need to feedback to user somehow that there was an error saving
		successGoalEdit(res);
	}

	function showWelcomeMsg(show){
		if (show){
			$('.profile-goals__welcome-msg').removeClass('hide');
			$('.profile-stuff-i-like__list-container').addClass('hide');
		} else {
			$('.profile-goals__welcome-msg').addClass('hide');
			$('.profile-stuff-i-like__list-container').removeClass('hide');
		}
	}


	opad.addToJsModules({
		name: "profile-stuff-i-like",
		fn: init
	});

})(window, document, jQuery);

"use strict";
(function(window, document, $) {
  var moodData = {};
  var moodDataFreetext = [];

  var moodDataFreetextDate = {};
  var thisDate;
  var chartList = {};

  var isLargeViewport = window.Modernizr.mq("(min-width: 1024px)");

  function init() {
    // Initialise profile details dropdown menu
    $("#profileDashboardHeading")
      .addClass("nav-arrow--closed")
      .on("click", toggleDashboardContainer);

    $(".mood-monitor-date-button").on("click", function() {
      opad.getMoods($(this).attr("data-mood-month"));
      toggleDashboardContainer();
    });

    $(".mood-monitor-mood-button").on("click", function(ev) {
      ev.stopPropagation();
    });

    $(".mood-monitor-arrow").on("click", changeDateRangeHandler);

    setupResizeHandler();

    opad.getMoods();
  }

  opad.getMoods = function(month, day) {
    var request = {
      plugin: "profiler",
      controller: "question",
      action: "get-mood-scores"
    };

    function success(res) {
      setMoodData(res);

      setupCharts(month, day);
    }

    function error(err) {}

    opad.postActionRequest(request, { month: month }, success, error);
  };

  function setupResizeHandler() {
    //create trigger to resizeEnd event
    $(window).resize(function() {
      if (this.resizeTO) {
        clearTimeout(this.resizeTO);
      }

      this.resizeTO = setTimeout(function() {
        $(this).trigger("resizeEnd");
      }, 500);
    });

    //redraw graph when window resize is completed
    $(window).on("resizeEnd", function() {
      isLargeViewport = window.Modernizr.mq("(min-width: 1024px)");
      setupCharts(thisDate, thisDate.getDate());
    });
  }

  function toggleDashboardContainer() {
    $("#profileDashboardContainer").toggleClass(
      "profile-dashboard__details__show"
    );
    $("#profileDashboardHeading").toggleClass("nav-arrow--closed");
  }

  function setupCharts(month, day) {
    $(".mood-monitor-chart-container").each(function() {
      var moodId = $(this).attr("data-mood-id");
      var container = this;

      chartList[moodId] = drawChart(getMoodData(moodId), this, month, day);

      $(this).delegate(".google-visualization-tooltip", "click", function() {
        chartList[moodId].setSelection([{}]);
      });
    });

    craftEventTracker.sendEvent({
      interactionId: "view",
      interactionCategory: "mood-monitor",
      parameter1: month,
      parameter2: day
    });
  }

  function showDiaryEntries(thisDate, nextDate) {
    var freetextContainer = $("#freetextContainer");

    var parsedDate;
    var hasEntry = false;

    freetextContainer.empty();

    for (var i in moodDataFreetext) {
      if (moodDataFreetext[i].textValue) {
        parsedDate = parseDateString(
          moodDataFreetext[i].dateCreated,
          moodDataFreetext[i].period
        );

        if (parsedDate >= thisDate && parsedDate <= nextDate) {
          hasEntry = true;

          freetextContainer.append(
            '<div class="mood-monitor-diary-item">' +
              '<div class="mood-monitor-diary-item--heading">' +
              getYearMonthStr(parsedDate) +
              "-" +
              parsedDate.getDate() +
              "</div>" +
              "<p>" +
              moodDataFreetext[i].textValue +
              "</p>" +
              "</div>"
          );
        }
      }
    }

    if (!hasEntry) {
      freetextContainer.append(
        "<p>" + freetextContainer.attr("data-no-entry-msg") + "</p>"
      );
    }
  }

  function getFillColor(value) {
    if (value < 3) {
      return "#F6767B";
    } else if (value < 6) {
      return "#FCC147";
    } else {
      return "#54B76E";
    }
  }

  function getDateRange(moodDate) {
    var hour = moodDate.getHours();

    if (hour < 5) {
      return "12am to 5am";
    }

    if (hour < 12) {
      return "5am to 12pm";
    }

    if (hour < 17) {
      return "12pm to 5pm";
    }

    return "5pm to 12am";
  }

  function parseDateString(dateStr, period) {
    var date = new Date(dateStr);

    switch (period) {
      case 2:
        date.setHours(4);
        break;
      case 3:
        date.setHours(8);
        break;
    }

    return date;
  }

  function setMoodData(data) {
    moodData = {};
    moodDataFreetext = [];

    var pointOptions = {};
    var moodDate, moodPopup, freeTextMoodPopup;
    for (var i = 0; i < data.length; i++) {
      if (
        data[i].questionId !== "freetext" &&
        typeof moodData[data[i].questionId] == "undefined"
      ) {
        moodData[data[i].questionId] = [];
      }
      moodDate = parseDateString(data[i].dateAnswered, data[i].period);

      moodPopup =
        "<div>" +
        moodDate.getDate() +
        " " +
        monthNames[moodDate.getMonth()] +
        "</div>" +
        "<div>" +
        getDateRange(moodDate) +
        "</div>";

      if (data[i].questionId === "freetext") {
        moodDataFreetext.push(data[i]);
        // var freetextDate = parseDateString(data[i].dateCreated);
        var freetextDateRef = moodDate.toDateString();

        freeTextMoodPopup =
          '<div class="google-visualization-tooltip__text">' +
          data[i].textValue +
          "</div>";

        if (!moodDataFreetextDate[freetextDateRef]) {
          moodDataFreetextDate[freetextDateRef] = "";
        }
        moodDataFreetextDate[freetextDateRef] += freeTextMoodPopup;
      } else {
        pointOptions =
          "point { fill-color: " + getFillColor(data[i].value) + " }";
        // moodDate = parseDateString(data[i].dateAnswered);

        moodData[data[i].questionId].push([
          moodDate,
          parseInt(data[i].value),
          pointOptions,
          moodPopup
        ]);
      }
    }

    // Insert all diary entries into each moodData dataset
    for (var questionId in moodData) {
      var moodDataDate = moodData[questionId][0][0].toDateString();

      if (moodDataFreetextDate[moodDataDate]) {
        moodData[questionId].forEach(function(item, index) {
          item[3] += moodDataFreetextDate[moodDataDate];
        });
      }
    }
  }

  function getYearMonthStr(dateObj) {
    var nextMonthStr;

    nextMonthStr = dateObj.getMonth() + 1;
    if (nextMonthStr < 10) {
      nextMonthStr = "0" + nextMonthStr;
    }
    return dateObj.getFullYear() + "-" + nextMonthStr;
  }

  function changeDateRangeHandler(ev) {
    var offsetDir = parseInt($(this).attr("data-offset-dir"));
    var nextWeekDate = new Date(thisDate);

    if (isLargeViewport) {
      nextWeekDate.setMonth(thisDate.getMonth() + offsetDir);

      opad.getMoods(getYearMonthStr(nextWeekDate), nextWeekDate.getDate());
    } else {
      nextWeekDate.setDate(thisDate.getDate() + 7 * offsetDir);

      if (nextWeekDate.getMonth() != thisDate.getMonth()) {
        opad.getMoods(getYearMonthStr(nextWeekDate), nextWeekDate.getDate());
      } else {
        setupCharts(nextWeekDate, nextWeekDate.getDate());
      }
    }

    ev.stopPropagation();
    ev.preventDefault();
  }

  function getMoodData(type) {
    return moodData[type];
  }

  function drawChart(dataValues, container, month, day) {
    var data = new google.visualization.DataTable();
    var thisMonth, thisWeek;
    var nextMonth, nextWeek, nextDate, prevMonth, prevWeek, prevDate;

    day = day || 1;
    month = month || Date.now();

    thisMonth = new Date(month);
    thisWeek = new Date(month);
    nextMonth = new Date(month);
    nextWeek = new Date(month);
    prevMonth = new Date(month);
    prevWeek = new Date(month);

    thisMonth.setDate(1);
    nextMonth.setMonth(nextMonth.getMonth() + 1);
    prevMonth.setDate(0);
    thisWeek.setDate(day);
    nextWeek.setDate(day + 6);
    prevWeek.setDate(day - 6);

    if (isLargeViewport) {
      thisDate = thisMonth;
      nextDate = nextMonth;
      prevDate = prevMonth;
    } else {
      thisDate = thisWeek;
      nextDate = nextWeek;
      prevDate = prevWeek;
    }

    thisDate.setHours(0, 0, 0);
    nextDate.setHours(23, 59, 59);

    var nextDateStr = getYearMonthStr(nextDate);
    var $nextArrow = $(
      '.mood-monitor-date-button[data-mood-month="' + nextDateStr + '"]'
    );

    if (nextDate > new Date()) {
      // Next date doesn't exist
      $(".mood-monitor-arrow__right").addClass("hide");
    } else {
      $(".mood-monitor-arrow__right").removeClass("hide");
    }

    var prevDateStr = getYearMonthStr(prevDate);
    var $prevArrow = $(
      '.mood-monitor-date-button[data-mood-month="' + prevDateStr + '"]'
    );
    if ($prevArrow.length == 0) {
      // Next date doesn't exist
      $(".mood-monitor-arrow__left").addClass("hide");
    } else {
      $(".mood-monitor-arrow__left").removeClass("hide");
    }

    $("#profileDashboardHeadingText").text(
      monthNames[thisDate.getMonth()] + " " + thisDate.getFullYear()
    );

    if (isLargeViewport) {
      nextDate.setDate(0); // Last day of previous month so dataset just shows month
    }

    data.addColumn("datetime", "X");
    data.addColumn("number", "Score");
    data.addColumn({ type: "string", role: "style" });
    data.addColumn({ type: "string", role: "tooltip", p: { html: true } });

    dataValues = dataValues || [];
    data.addRows(dataValues);

    var tickDate = new Date(thisDate);
    var ticks = [];
    while (tickDate <= nextDate) {
      ticks.push(new Date(tickDate));
      tickDate.setDate(tickDate.getDate() + 1);
    }

    var options = {
      height: 180,
      lineWidth: 1,
      chartArea: {
        width: "98%",
        left: "1%",
        height: 144
      },
      hAxis: {
        title: "",
        textStyle: {
          color: "#37383b",
          fontSize: 14,
          fontName: "Lato",
          bold: false,
          italic: false,
          maxAlternation: 1
        },
        gridlines: {
          color: "#fff",
          count: ticks.length + 1
        },
        ticks: ticks,
        format: "ccccc",
        slantedText: false,
        viewWindow: {
          min: thisDate,
          max: nextDate
        }
      },
      vAxis: {
        title: "",
        gridlines: {
          color: "#fff"
        },
        textPosition: "none",
        maxValue: 7,
        minValue: 0,
        viewWindowMode: "maximized",
        baselineColor: "#cccccc"
      },
      legend: {
        position: "none"
      },
      colors: ["#CCC"],
      pointSize: 14,
      dataOpacity: 1,
      tooltip: {
        isHtml: true,
        trigger: "selection"
      }
    };

    $("#moodMonitorWeekHeading").text(
      thisDate.getDate() + " - " + nextDate.getDate()
    );

    var chart = new google.visualization.LineChart(container);
    chart.draw(data, options);

    // showDiaryEntries(thisDate, nextDate);

    return chart;
  }

  opad.addToJsModules({
    name: "mood-monitor",
    fn: init
  });

  //	opad.addToInitQueue(init);
})(window, document, jQuery);

'use strict';
(function(window, document, $){



	function init(){

		// Initialise any form upload buttons
		var fileElem = document.getElementById("fileElem"),
			$fileElem = $(fileElem),
			profileImageForm = document.getElementById("profileImageForm");
			

		$fileElem.on('change', function(e){
			$('.profile-dashboard__photo-upload__button-txt').addClass('hide');
			$('.profile-dashboard__photo-msg').removeClass('hide');
			profileImageForm.submit();
		});

		$(fileElem).attr('name', 'userPhoto');

		$("#fileSelect").on("click touchstart", function(e) {

			e.stopPropagation();

			if ($fileElem) {
				$fileElem.trigger('click');
			}
			
		//	e.preventDefault(); // prevent navigation to "#"
		});
	

	

		



		initMoodList();

		initRecommendations();

		showContinueModal();
	
		craftEventTracker.sendEvent({
			interactionId: 			'view',
			interactionCategory: 	'dashboard'
		});

	}

	function showContinueModal(){
		$('#continueModal').foundation('reveal', 'open');
	}

	function initMoodList(){
		var moodListContainer = document.getElementById('profileDashboardMoodScrollContainer');
		var	moodListEl = document.getElementById('profileDashboardMoodList');
		var moodItems = moodListEl.children;


		//Initialise Mood list scroll so its full width and scrolled to the middle

		var moodItemsWidth = 0;
		for (var i=0; i < moodItems.length; i++){
			moodItemsWidth += moodItems[i].clientWidth;
console.log(moodItems[i], moodItems[i].clientWidth);
		}

		$(moodListEl).width( moodItemsWidth ).addClass('profile-dashboard-mood-list--show');
		moodListContainer.scrollLeft = (moodListEl.clientWidth - moodListContainer.clientWidth)/2;
	}


	function initRecommendations(){
		var request = {
			plugin: "moduleactions",
			controller: "default",
			action: "get-recommended-modules"
		}

		function success(res){

			for (var i=0; i < res.hereForSelf.length; i++){

				$("#submodule-" + res.hereForSelf[i] + " a").addClass("profile-dashboard-module-highlight-self");
			}

			for (var i=0; i < res.hereForOther.length; i++){

				$("#submodule-" + res.hereForOther[i] + " a").addClass("profile-dashboard-module-highlight-other");
			}


		}

		function error(err){

		}

		opad.postActionRequest(request, {}, success, error);

	}

	

	function scrollIntoView($el){

		var offset = $el.offset(); 
		$('html, body').animate({
		    scrollTop: offset.top
		}, 250); 
	}

	opad.addToJsModules({
		name: "dashboard", 
		fn: init
	});

})(window, document, jQuery);
'use strict';
(function(window, document, $){

	var userOptions = {};
	var userDefinedOptionsField;

	function init(){
		
		initForm();

		initUserDefinedOptions();
	}

	function initForm(){
		// Initialise edit details buttons
		$('.profile-dashboard__edit-button').on('click', function(){
			$(this).parents('.profile-dashboard__details__item').toggleClass("profile-dashboard__details__item--edit");
		});


		$('.profile-dashboard__input--autoupdate').on('change', function(){

			var $form = $(this).parents('.profile-dashboard__details-form'),
				data = $form.serialize(),
				$this = $(this),
				$container = $this.parents('.profile-dashboard__category'),
				catId = this.value,
				hereFor = $('.profile-dashboard__input--herefor:checked').first().attr('value');

				if ($this.parents('.profile-dashboard__details__item--edit').length == 0){
					return;
				}

				// Show/hide relevant category when not in edit mode
				if (this.checked){
					$container.addClass('profile-dashboard__mycategory')
						.removeClass('profile-dashboard__notmycategory');

					$('.profile-dashboard-module-list__item a').each(function(){
						var $this = $(this);

						if ( $this.attr('data-cats') && $this.attr('data-cats').indexOf(',' + catId + ',') > -1 ){
							$this.addClass('profile-dashboard-module-highlight-' + hereFor);
						}
					});

				} else {
					$container.addClass('profile-dashboard__notmycategory')
						.removeClass('profile-dashboard__mycategory');

					$('.profile-dashboard-module-highlight-' + hereFor).each(function(){
						var $this = $(this);

						if ( $this.attr('data-cats') && $this.attr('data-cats').indexOf(',' + catId + ',') > -1 ){
							$this.removeClass('profile-dashboard-module-highlight-' + hereFor);
						}
					});
				}

				$.ajax({
					type: 	$form.attr('method'),
					data: 	data
				})


		});
	}

	function initUserDefinedOptions(){

		var $container = $('#profileDashboardContainer');
		userDefinedOptionsField = document.getElementById('userDefinedOptionsField');
		
		try{
			userOptions = JSON.parse(userDefinedOptionsField.value);
		}catch(e){}

		$.each(userOptions, function(key, options){
			$.each(options, function(index, option){
				try{
					addUserOptionToPage(option, $('#List' + key));
				}catch(e){}
			});
		});

		$container.delegate('.feature-block-option-mylist-delete', 'click', deleteUserOption)
			.delegate('.feature-block-option-mylist-add', 'click', addUserOption);
		
	}


	function saveUserData($this){
		var $form = $this.parents('.profile-dashboard__details-form'),
		data = $form.serialize();

		$.ajax({
			type: 	$form.attr('method'),
			data: 	data
		})
	}

	function addUserOptionToPage(option, $container){

		var optionEl = opad.templates.featureBlockOption({
			option: option
		});
		$container.removeClass('hide').find('.feature-block-option-mylist--empty').before(optionEl);
		$container.parents('.profile-dashboard__details__item').find('.profile-dashboard__no-category-msg').addClass('hide');
	}

	function addUserOption(e){
		var $this = $(this);
		var $item = $this.parents('.profile-dashboard__new-item');
		var catId = $this.parents('.profile-dashboard__details__item-container').attr('id');
		var entry = $item.find('.feature-block-option-mylist-input').first().val() ;

		e.stopPropagation();
		e.preventDefault();

		addUserOptionToPage({ text: entry}, $('#List' + catId));

		if (!userOptions[catId]){
			userOptions[catId] = [];
		}
		userOptions[catId].push({ text: entry});
		userDefinedOptionsField.value = JSON.stringify(userOptions);
		saveUserData($this);
	}

	function deleteUserOption(e){

		var $this = $(this);
		var $item = $this.parents('.feature-block-option-mylist__item');
		var catId = $this.parents('.profile-dashboard__details__item-container').attr('id');
		var entry = JSON.parse($item.find('.feature-block-option-mylist-item__value').attr('data-json'));

		e.stopPropagation();
		e.preventDefault();
		
		// Remove from user options

		$.each(userOptions[catId], function(index, option){
			if (option && option.text == entry.text){
				userOptions[catId].splice(index,1);
			}

		})
		userDefinedOptionsField.value = JSON.stringify(userOptions);

		saveUserData($this);

		$item.remove();
	}

	opad.addToJsModules({
		name: "my-answers", 
		fn: init
	});

})(window, document, jQuery);

'use strict';
(function(window, document, $){

	function init(){
		var $prevArrow = $('#prevArrowButton');
		var $nextArrow = $('#nextArrowButton');
		var $slickContainer = $('.slick-carousel-container');

		$slickContainer.slick({
				infinite: false,
				speed: 500,
				draggable: false,
				swipe: false,
				prevArrow: false,
				nextArrow: false,
				adaptiveHeight: true
      		})

		$prevArrow.on('click', function(ev){
			// If not on first slide then go back to previous
			// otherwise follow links href
			if ( $slickContainer.slick('slickCurrentSlide') !== 0){
				ev.preventDefault();
				$slickContainer.attr('data-save',  false);
				$slickContainer.slick('slickPrev');				
			}

		});

		$nextArrow.on('click', function(ev){
			ev.preventDefault();
			opad.skipMoodSave = false;
			$slickContainer.slick('slickNext');
		});

		$('#skipStep').on('click', function(ev){
			ev.preventDefault();
			opad.skipMoodSave = true;
			$slickContainer.slick('slickNext');
		})
	}

	opad.addToJsModules({
		name: "slick-carousel", 
		fn: init
	});

})(window, document, jQuery);

this["opad"] = this["opad"] || {};
this["opad"]["templates"] = this["opad"]["templates"] || {};
this["opad"]["templates"]["featureBlockOption"] = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1, alias1=this.lambda, alias2=this.escapeExpression;

  return "	<a class=\"feature-block-option-mylist-item__value\" data-json='{\"text\": \""
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.option : depth0)) != null ? stack1.text : stack1), depth0))
    + "\", \"url\": \""
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.option : depth0)) != null ? stack1.url : stack1), depth0))
    + "\" }' href=\""
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.option : depth0)) != null ? stack1.url : stack1), depth0))
    + "\">"
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.option : depth0)) != null ? stack1.text : stack1), depth0))
    + "</a>";
},"3":function(depth0,helpers,partials,data) {
    var stack1, alias1=this.lambda, alias2=this.escapeExpression;

  return "\n	<span class=\"feature-block-option-mylist-item__value\" data-json='{\"text\": \""
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.option : depth0)) != null ? stack1.text : stack1), depth0))
    + "\" }'>"
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.option : depth0)) != null ? stack1.text : stack1), depth0))
    + "</span><!--\n-->";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1;

  return "<li class=\"button round feature-block-option-mylist__item\">\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.option : depth0)) != null ? stack1.url : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(3, data, 0),"data":data})) != null ? stack1 : "")
    + "<!--\n--><span class=\"feature-block-option-mylist-delete\"></span>\n</li> ";
},"useData":true});
this["opad"]["templates"]["profileGoalItemCompleted"] = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    return "false";
},"3":function(depth0,helpers,partials,data) {
    return "true";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1, alias1=this.lambda, alias2=this.escapeExpression;

  return "<li data-goal-id=\""
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.goal : depth0)) != null ? stack1.id : stack1), depth0))
    + "\" aria-hidden=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.goal : depth0)) != null ? stack1.isTodo : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(3, data, 0),"data":data})) != null ? stack1 : "")
    + "\" class=\"profile-goals__list-item\" data-status=\""
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.goal : depth0)) != null ? stack1.status : stack1), depth0))
    + "\">\n	<div class=\"row\">\n		<div class=\"small-12 column\">\n\n			<span class=\"profile-goals__activity\">"
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.goal : depth0)) != null ? stack1.activity : stack1), depth0))
    + "</span>\n\n			<a href=\"/actions/profiler/goal/reset-activity?goalId="
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.goal : depth0)) != null ? stack1.id : stack1), depth0))
    + "\" class=\"btn btn-default btn-sm profile-goal__action-link\" data-goal-action=\"undo\"><span class=\"show-for-sr\">Reset activity</span><span class=\"ss-icon ss-icon-circle ss-replay\"></span></a>\n		</div>\n	</div>\n</li>";
},"useData":true});
this["opad"]["templates"]["profileGoalItemToDo"] = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    return "false";
},"3":function(depth0,helpers,partials,data) {
    return "true";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1, alias1=this.lambda, alias2=this.escapeExpression;

  return "<li data-goal-id=\""
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.goal : depth0)) != null ? stack1.id : stack1), depth0))
    + "\" aria-hidden=\""
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.goal : depth0)) != null ? stack1.isTodo : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.program(3, data, 0),"data":data})) != null ? stack1 : "")
    + "\" class=\"profile-goals__list-item\" data-status=\""
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.goal : depth0)) != null ? stack1.status : stack1), depth0))
    + "\">\n	<div class=\"row\">\n		<div class=\"small-12 column\">\n\n			<span class=\"icon-circle profile-goals__times-completed\">"
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.goal : depth0)) != null ? stack1.timesLeft : stack1), depth0))
    + "</span><span class=\"profile-goals__activity\" id=\"profileGoalActivity\">"
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.goal : depth0)) != null ? stack1.activity : stack1), depth0))
    + "</span>\n\n			<a href=\"/actions/profiler/goal/done-activity?goalId="
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.goal : depth0)) != null ? stack1.id : stack1), depth0))
    + "\" class=\"btn btn-default btn-sm profile-goal__action-link\" data-goal-status=\""
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.goal : depth0)) != null ? stack1.status : stack1), depth0))
    + "\" data-times-per-week=\""
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.goal : depth0)) != null ? stack1.timesPerWeek : stack1), depth0))
    + "\" data-times-completed=\""
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.goal : depth0)) != null ? stack1.timesCompleted : stack1), depth0))
    + "\" data-goal-action=\"complete\"><span class=\"show-for-sr\">Complete activity</span><span class=\"ss-icon ss-icon-circle ss-check\"></span></a>\n\n			<a href=\"/actions/profiler/goal/delete-goal?goalId="
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.goal : depth0)) != null ? stack1.id : stack1), depth0))
    + "\" class=\"btn btn-default btn-sm profile-goal__action-link\" data-goal-action=\"delete\"><span class=\"show-for-sr\">Delete activity'</span><span class=\"ss-icon ss-icon-circle ss-delete\"></span></a>\n		</div>\n	</div>\n</li>";
},"useData":true});
this["opad"]["templates"]["profileStuffILikeItem"] = Handlebars.template({"1":function(depth0,helpers,partials,data) {
    var stack1;

  return "	<a class=\"profile-stuff-i-like__user-link\" href=\""
    + this.escapeExpression(this.lambda(((stack1 = (depth0 != null ? depth0.stuffILike : depth0)) != null ? stack1.url : stack1), depth0))
    + "\">\n";
},"3":function(depth0,helpers,partials,data) {
    return "		</a>\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
    var stack1, alias1=this.lambda, alias2=this.escapeExpression;

  return "\n\n<li data-stuff-i-like-id=\""
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.stuffILike : depth0)) != null ? stack1.id : stack1), depth0))
    + "\" class=\"profile-goals__list-item profile-stuff-i-like__list-item\">\n\n	<div class=\"row\">\n	<div class=\"small-12 column\">\n\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.stuffILike : depth0)) != null ? stack1.url : stack1),{"name":"if","hash":{},"fn":this.program(1, data, 0),"inverse":this.noop,"data":data})) != null ? stack1 : "")
    + "\n		<span class=\"profile-stuff-i-like-icon\"></span><!--\n\n		--><span class=\"profile-stuff-i-like__title\">"
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.stuffILike : depth0)) != null ? stack1.title : stack1), depth0))
    + "</span>\n\n		<a href=\"/actions/profiler/stuff-i-like/delete-stuff-i-like?stuffILikeId="
    + alias2(alias1(((stack1 = (depth0 != null ? depth0.stuffILike : depth0)) != null ? stack1.id : stack1), depth0))
    + "\" class=\"profile-goal__action-link profile-stuff-i-like__action-link\" data-stuff-i-like-action=\"delete\"><span class=\"show-for-sr\">Delete</span><span class=\"ss-icon ss-icon-circle ss-delete\"></span></a>\n\n"
    + ((stack1 = helpers['if'].call(depth0,((stack1 = (depth0 != null ? depth0.stuffILike : depth0)) != null ? stack1.url : stack1),{"name":"if","hash":{},"fn":this.program(3, data, 0),"inverse":this.noop,"data":data})) != null ? stack1 : "")
    + "\n	</div>\n	</div>\n\n</li>\n";
},"useData":true});
'use strict';
(function(window, document, $){

	var questionAnswered = false;

	function init(){

		var questionAnswered = false;

		if ($('.feature-block-quiz').length ==0){
			return;
		}
		
		$('.slick-carousel-container').slick('slickSetOption', 'arrows', false, true);

		$('.feature-block-button').on('click', function(){
			questionChosen(this);
		});

	}

	function questionChosen(button, forceAnswer){
		var $this = $(button);
			var correctAnswer = $this.parent().hasClass('feature-block-quiz-answer-correct');
			var $quizContainer = $this.parents('.feature-block-quiz-question-container');

			if (questionAnswered && !forceAnswer){
				return;
			}
			questionAnswered = true;

			$quizContainer.addClass('feature-block-quiz-answered')
				.find('.feature-block-quiz-chosen-answer')
				.removeClass('feature-block-quiz-chosen-answer');

			$this.addClass('feature-block-quiz-chosen-answer');

		if (!correctAnswer){
			setTimeout(function(){
				questionChosen($quizContainer.find('.feature-block-quiz-answer-correct .feature-block-button'), true );
			}, 700);

		} else {
			setTimeout(function(){
				// go to next slide
				$quizContainer.removeClass('.feature-block-quiz-answered')
					.parents('.slick-carousel-container').slick('slickNext');
				
				questionAnswered = false;
			}, 1500);

			}
	}


	opad.addToJsModules({
		name: "feature-block-quiz", 
		fn: init
	});

})(window, document, jQuery);

'use strict';
(function(window, document, $){
	function init(){

		$('.feature-block-case-study-container').addClass('module-nav--closed');
		$('.feature-block-case-study-link').addClass('nav-arrow--closed');

		$('.feature-block-case-study-link').on('click', function(){
			var $this = $(this);

			$('.feature-block-case-study-link').toggleClass('nav-arrow--closed');

			$this.parents('.feature-block-case-study-container').toggleClass('module-nav--closed');
		});

	}

	opad.addToJsModules({
		name: "feature-block-case-study", 
		fn: init
	});

})(window, document, jQuery);

'use strict';
(function(window, document, $){

	var userOptions, userOptionsOther;

	function init(){
		var initialSettings;
		
		$('.feature-block-option-mylist-add').on('click', addUserOption);
		$('.feature-block-option-mylist-input').on('change', function(){

			var $container = $(this).parents('.feature-block-option-mylist-container');

			// Only auto submit on change if no url input field is present
			if ($container.find('.feature-block-option-mylist-input-url').length == 0){
				addUserOption.call(this);
			}

		});

		$('.profile-user-options__input').on('change', function(){
			saveOptions(this);
		});

		$('.feature-block-option-mylist').delegate('.feature-block-option-mylist-delete', 'click', deleteUserOption);	
		// Initialise user options
		$('.feature-block-option-mylist').each(function(index, el){
			var $listData = $(el);
			var $container = $('#' + $listData.attr('data-container'));
			var userType =  $listData.attr('data-user-type');

			 if (!$listData.attr('data-json')){
			 	return;
			 }

			if (userType == "other"){
				userOptionsOther = userOptionsOther || JSON.parse($listData.attr('data-json'));
				if (userOptionsOther && typeof userOptionsOther[$listData.attr('id')] != 'undefined'){

					userOptionsOther[$listData.attr('id')].forEach(function(item){
						addUserOptionToPage(item, $container);				
					})				
				}
			} else {
				userOptions = userOptions || JSON.parse($listData.attr('data-json'));


				if (userOptions && typeof userOptions[$listData.attr('id')] != 'undefined'){
					userOptions[$listData.attr('id')].forEach(function(item){
						addUserOptionToPage(item, $container);				
					})				
				}
			}

		});
	}

	function saveOptions(formEl, profileAgreed){

		var $form = $($(formEl).parents('.feature-block-option').find('form'));

		var $inputEl = $form.find('input[name="fields[userDefinedOptions]"]');
		var $inputOtherEl = $form.find('input[name="fields[userDefinedOptionsOther]"]');

		if (!profileAgreed && $('#saveProfileOverlay').first().hasClass('not-answered')){
			opad.modal.openModal('#saveProfileOverlay', function(profileAgreed){
				// Do saveOptions again if agreed to have user profile
				document.getElementById('featureBlockOptionHasProfile').value = profileAgreed;
				saveOptions(formEl, profileAgreed);
			});

		} else {

			if ($inputEl.length){
				$inputEl.val( JSON.stringify(userOptions) );
			}

			if ($inputOtherEl.length){
				$inputOtherEl.val( JSON.stringify(userOptionsOther) );
			}

			var formData = $form.serializeArray();
			
			$.ajax({
				url: "",
				type: "POST",
				data: formData,
				success: function(data, status){

				},
				error: function(err){
					// Error saving -- notify user?
				}
			});	
		}

	}

	function deleteUserOption(){

		var $this = $(this);
		var $container = $(this).parents('.feature-block-option-mylist-container');
		var userType =  $container.attr('data-user-type');
		var $list = $( $this.parents('.feature-block-option-mylist') );
		var optionsList = [];

		$this.parents('.feature-block-option-mylist__item').remove();

		$list.find('.feature-block-option-mylist-item__value').each(function(index, item){
			optionsList.push( JSON.parse( $(item).attr('data-json')) );
		});

		if (optionsList.length == 0){
//			$list.addClass('hide');
			$list.find('.feature-block-option-mylist.hide').removeClass('hide');
		}


		if (userType == "other"){
			userOptionsOther[ $list.attr('data-cat') ] = optionsList;

		} else {
			userOptions[ $list.attr('data-cat') ] = optionsList;
		}

		saveOptions($list);
	}


	function addUserOption(){

		var $container = $(this).parents('.feature-block-option-mylist-container');
		var newOptionInput = $container.find('.feature-block-option-mylist-input');
		var newOptionUrl = $container.find('.feature-block-option-mylist-input-url');
		var listId = $container.find('.feature-block-option-mylist').removeClass('hide').attr('id');
		var optionJson = {};
		var userType =  $container.attr('data-user-type');

		if (newOptionInput.val()){

			optionJson.text = newOptionInput.val();
			if (newOptionUrl.length > 0){
				optionJson.url = newOptionUrl.val();
			}

			addUserOptionToPage(optionJson, $container);

			if (userOptions && typeof userOptions[listId] == "undefined"){
				userOptions[listId] = [];
			}

			if (userOptionsOther && typeof userOptionsOther[listId] == "undefined"){
				userOptionsOther[listId] = [];
			}

			if (userType == "other"){
				userOptionsOther[listId].push(optionJson);

			} else {
				userOptions[listId].push(optionJson);
			}

			newOptionInput.val('');
			if (newOptionUrl.length > 0){
				newOptionUrl.val('');
			}


		}

		$container.parents('.profile-dashboard__details__item').find('.profile-dashboard__no-category-msg').addClass('hide');

		saveOptions(this);
	}

	function addUserOptionToPage(option, $container){

		var optionEl = opad.templates.featureBlockOption({
			option: option
		});
		
		$container.find('.feature-block-option-mylist').removeClass('hide').append(optionEl);
	}

	function removeUserOption(){

	}


	opad.addToJsModules({
		name: "feature-block-options", 
		fn: init
	});

})(window, document, jQuery);

'use strict';
(function(window, document, $){
	
	var $overlay,
	myYesCb,
	myNoCb;

	function init(){
		
		$overlay = $('#saveProfileOverlay');

		$('#modalSaveProfileButtonYes').on('click', function(){
			$overlay.removeClass('not-answered');
			closeModal();
			if (typeof myYesCb == "function"){
				myYesCb(true);
			}
		});

		$('#modalSaveProfileButtonNo').on('click', function(){
			closeModal();
			if (typeof myNoCb == "function"){
				myNoCb();
			}
		});

	}

	function openModal(selector, yesCb, noCb){
		myYesCb = yesCb;
		myNoCb = noCb;

		$(selector).first().foundation('reveal', 'open');
	}

	function closeModal(){
		$overlay.first().foundation('reveal', 'close');
	}

	opad.modal = {};
	opad.modal.openModal = openModal;
	opad.modal.closeModal = closeModal;

	opad.addToJsModules({
		name: "feature-block-save-profile-modal", 
		fn: init
	});

})(window, document, jQuery);

'use strict';
(function(window, document, $){
	function init(){

		$('#featureBlockFeebackForm').on('submit', function(ev){
			// Override form submission with AJAX call
			ev.preventDefault();
			var $this = $(this);
			var formData = $this.serialize();

			$.ajax({
				url: "",
				type: "POST",
				data: formData,
				success: function(data, status){
					$this.addClass('form-submitted');
				},
				error: function(err){
					// Error saving -- notify user?
					$this.addClass('form-submitted');
				}
			});

		})

	}

	opad.addToJsModules({
		name: "feature-block-feedback", 
		fn: init
	});

})(window, document, jQuery);

'use strict';
(function(window, document, $){
	function init(){
console.log('init');
		$('.four-image-click-to-open-sub-item').on('click', function(){
			var $this = $(this);

			$('.content-block-click-to-open--text__open').removeClass('content-block-click-to-open--text__open');
			$('.four-image-click-to-open-sub-item__open').removeClass('four-image-click-to-open-sub-item__open');

			$('#contentBlockClickToOpen-' + $this.attr('data-click-to-open-id') ).addClass('content-block-click-to-open--text__open');
			$this.addClass('four-image-click-to-open-sub-item__open');
		});

	}

	opad.addToJsModules({
		name: "four-image-click-to-open", 
		fn: init
	});

})(window, document, jQuery);
